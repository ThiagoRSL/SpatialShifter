// Tessellation Control Shader
//
// Este estágio tem acesso a todos os vértices do Patch. Eles serão então utilizados para
// calcular a posição do novo vértice gerado pela GPU através de uma interpolação linear.
//
// Abril 2016 - Alex Frasson - afrasson@inf.ufsm.br

#version 460

layout(triangles, equal_spacing, ccw) in;

uniform mat4 MVP;
uniform sampler2D displacementmapSampler;
uniform vec4 MousePosition;
uniform float DisplacementIntensity;

in vec4 tcPosition[];
in vec2 tcUv[];
in vec3 tcNormal[];

out vec4 tePosition;
out vec3 teNormal;
out vec4 original_position;

void main()
{

	// Coordenadas geradas pela GPU
	float u = gl_TessCoord.x;
	float v = gl_TessCoord.y;
	float w = gl_TessCoord.z;

	// Vértices do nosso Patch
	vec4 p0 = tcPosition[0];
	vec4 p1 = tcPosition[1];
	vec4 p2 = tcPosition[2];
	vec4 p3 = tcPosition[3];
	
	// Linear interpolation
	gl_Position =
		p0 * (1 - u) * (1 - v) +
		p1 * u * (1 - v) +
		p3 * v * (1 - u) +
		p2 * u * v;
		
	// Transform to clip coordinates
	original_position = gl_Position;
	gl_Position = MVP * gl_Position;
}